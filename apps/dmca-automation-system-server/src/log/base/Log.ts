/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Content } from "../../content/base/Content";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { DmcaRequest } from "../../dmcaRequest/base/DmcaRequest";
import { EnumLogLogType } from "./EnumLogLogType";

@ObjectType()
class Log {
  @ApiProperty({
    required: false,
    type: () => Content,
  })
  @ValidateNested()
  @Type(() => Content)
  @IsOptional()
  content?: Content | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => DmcaRequest,
  })
  @ValidateNested()
  @Type(() => DmcaRequest)
  @IsOptional()
  dmcaRequest?: DmcaRequest | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  logDate!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumLogLogType,
  })
  @IsEnum(EnumLogLogType)
  @IsOptional()
  @Field(() => EnumLogLogType, {
    nullable: true,
  })
  logType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  message!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Log as Log };
