/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ContentWhereUniqueInput } from "../../content/base/ContentWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { DmcaRequestWhereUniqueInput } from "../../dmcaRequest/base/DmcaRequestWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumLogLogType } from "./EnumLogLogType";
import { StringNullableFilter } from "../../util/StringNullableFilter";

@InputType()
class LogWhereInput {
  @ApiProperty({
    required: false,
    type: () => ContentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ContentWhereUniqueInput)
  @IsOptional()
  @Field(() => ContentWhereUniqueInput, {
    nullable: true,
  })
  content?: ContentWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DmcaRequestWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DmcaRequestWhereUniqueInput)
  @IsOptional()
  @Field(() => DmcaRequestWhereUniqueInput, {
    nullable: true,
  })
  dmcaRequest?: DmcaRequestWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  logDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumLogLogType,
  })
  @IsEnum(EnumLogLogType)
  @IsOptional()
  @Field(() => EnumLogLogType, {
    nullable: true,
  })
  logType?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  message?: StringNullableFilter;
}

export { LogWhereInput as LogWhereInput };
