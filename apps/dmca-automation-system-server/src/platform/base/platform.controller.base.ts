/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlatformService } from "../platform.service";
import { PlatformCreateInput } from "./PlatformCreateInput";
import { Platform } from "./Platform";
import { PlatformFindManyArgs } from "./PlatformFindManyArgs";
import { PlatformWhereUniqueInput } from "./PlatformWhereUniqueInput";
import { PlatformUpdateInput } from "./PlatformUpdateInput";
import { ContentFindManyArgs } from "../../content/base/ContentFindManyArgs";
import { Content } from "../../content/base/Content";
import { ContentWhereUniqueInput } from "../../content/base/ContentWhereUniqueInput";

export class PlatformControllerBase {
  constructor(protected readonly service: PlatformService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Platform })
  async createPlatform(
    @common.Body() data: PlatformCreateInput
  ): Promise<Platform> {
    return await this.service.createPlatform({
      data: data,
      select: {
        createdAt: true,
        id: true,
        lastScraped: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Platform] })
  @ApiNestedQuery(PlatformFindManyArgs)
  async platforms(@common.Req() request: Request): Promise<Platform[]> {
    const args = plainToClass(PlatformFindManyArgs, request.query);
    return this.service.platforms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        lastScraped: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async platform(
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Platform | null> {
    const result = await this.service.platform({
      where: params,
      select: {
        createdAt: true,
        id: true,
        lastScraped: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlatform(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() data: PlatformUpdateInput
  ): Promise<Platform | null> {
    try {
      return await this.service.updatePlatform({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          lastScraped: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlatform(
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Platform | null> {
    try {
      return await this.service.deletePlatform({
        where: params,
        select: {
          createdAt: true,
          id: true,
          lastScraped: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contents")
  @ApiNestedQuery(ContentFindManyArgs)
  async findContents(
    @common.Req() request: Request,
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Content[]> {
    const query = plainToClass(ContentFindManyArgs, request.query);
    const results = await this.service.findContents(params.id, {
      ...query,
      select: {
        contentType: true,
        contentUrl: true,
        createdAt: true,
        fingerprint: true,
        foundAt: true,
        id: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contents")
  async connectContents(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contents: {
        connect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contents")
  async updateContents(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contents: {
        set: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contents")
  async disconnectContents(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: ContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contents: {
        disconnect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }
}
