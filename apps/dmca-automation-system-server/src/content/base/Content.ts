/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumContentContentType } from "./EnumContentContentType";
import {
  IsEnum,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { DmcaRequest } from "../../dmcaRequest/base/DmcaRequest";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { Log } from "../../log/base/Log";
import { Platform } from "../../platform/base/Platform";

@ObjectType()
class Content {
  @ApiProperty({
    required: false,
    enum: EnumContentContentType,
  })
  @IsEnum(EnumContentContentType)
  @IsOptional()
  @Field(() => EnumContentContentType, {
    nullable: true,
  })
  contentType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contentUrl!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DmcaRequest],
  })
  @ValidateNested()
  @Type(() => DmcaRequest)
  @IsOptional()
  dmcaRequests?: Array<DmcaRequest>;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  fingerprint!: JsonValue;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  foundAt!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Log],
  })
  @ValidateNested()
  @Type(() => Log)
  @IsOptional()
  logs?: Array<Log>;

  @ApiProperty({
    required: false,
    type: () => Platform,
  })
  @ValidateNested()
  @Type(() => Platform)
  @IsOptional()
  platform?: Platform | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Content as Content };
