/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScrapingConfiguration } from "./ScrapingConfiguration";
import { ScrapingConfigurationCountArgs } from "./ScrapingConfigurationCountArgs";
import { ScrapingConfigurationFindManyArgs } from "./ScrapingConfigurationFindManyArgs";
import { ScrapingConfigurationFindUniqueArgs } from "./ScrapingConfigurationFindUniqueArgs";
import { CreateScrapingConfigurationArgs } from "./CreateScrapingConfigurationArgs";
import { UpdateScrapingConfigurationArgs } from "./UpdateScrapingConfigurationArgs";
import { DeleteScrapingConfigurationArgs } from "./DeleteScrapingConfigurationArgs";
import { ScrapingConfigurationService } from "../scrapingConfiguration.service";
@graphql.Resolver(() => ScrapingConfiguration)
export class ScrapingConfigurationResolverBase {
  constructor(protected readonly service: ScrapingConfigurationService) {}

  async _scrapingConfigurationsMeta(
    @graphql.Args() args: ScrapingConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScrapingConfiguration])
  async scrapingConfigurations(
    @graphql.Args() args: ScrapingConfigurationFindManyArgs
  ): Promise<ScrapingConfiguration[]> {
    return this.service.scrapingConfigurations(args);
  }

  @graphql.Query(() => ScrapingConfiguration, { nullable: true })
  async scrapingConfiguration(
    @graphql.Args() args: ScrapingConfigurationFindUniqueArgs
  ): Promise<ScrapingConfiguration | null> {
    const result = await this.service.scrapingConfiguration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScrapingConfiguration)
  async createScrapingConfiguration(
    @graphql.Args() args: CreateScrapingConfigurationArgs
  ): Promise<ScrapingConfiguration> {
    return await this.service.createScrapingConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ScrapingConfiguration)
  async updateScrapingConfiguration(
    @graphql.Args() args: UpdateScrapingConfigurationArgs
  ): Promise<ScrapingConfiguration | null> {
    try {
      return await this.service.updateScrapingConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScrapingConfiguration)
  async deleteScrapingConfiguration(
    @graphql.Args() args: DeleteScrapingConfigurationArgs
  ): Promise<ScrapingConfiguration | null> {
    try {
      return await this.service.deleteScrapingConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
