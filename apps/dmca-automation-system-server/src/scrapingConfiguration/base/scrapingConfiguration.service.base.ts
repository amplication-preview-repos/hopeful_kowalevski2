/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ScrapingConfiguration as PrismaScrapingConfiguration,
} from "@prisma/client";

export class ScrapingConfigurationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapingConfigurationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapingConfiguration.count(args);
  }

  async scrapingConfigurations(
    args: Prisma.ScrapingConfigurationFindManyArgs
  ): Promise<PrismaScrapingConfiguration[]> {
    return this.prisma.scrapingConfiguration.findMany(args);
  }
  async scrapingConfiguration(
    args: Prisma.ScrapingConfigurationFindUniqueArgs
  ): Promise<PrismaScrapingConfiguration | null> {
    return this.prisma.scrapingConfiguration.findUnique(args);
  }
  async createScrapingConfiguration(
    args: Prisma.ScrapingConfigurationCreateArgs
  ): Promise<PrismaScrapingConfiguration> {
    return this.prisma.scrapingConfiguration.create(args);
  }
  async updateScrapingConfiguration(
    args: Prisma.ScrapingConfigurationUpdateArgs
  ): Promise<PrismaScrapingConfiguration> {
    return this.prisma.scrapingConfiguration.update(args);
  }
  async deleteScrapingConfiguration(
    args: Prisma.ScrapingConfigurationDeleteArgs
  ): Promise<PrismaScrapingConfiguration> {
    return this.prisma.scrapingConfiguration.delete(args);
  }
}
