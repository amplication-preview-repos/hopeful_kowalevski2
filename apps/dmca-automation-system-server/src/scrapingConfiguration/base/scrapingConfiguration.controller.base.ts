/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrapingConfigurationService } from "../scrapingConfiguration.service";
import { ScrapingConfigurationCreateInput } from "./ScrapingConfigurationCreateInput";
import { ScrapingConfiguration } from "./ScrapingConfiguration";
import { ScrapingConfigurationFindManyArgs } from "./ScrapingConfigurationFindManyArgs";
import { ScrapingConfigurationWhereUniqueInput } from "./ScrapingConfigurationWhereUniqueInput";
import { ScrapingConfigurationUpdateInput } from "./ScrapingConfigurationUpdateInput";

export class ScrapingConfigurationControllerBase {
  constructor(protected readonly service: ScrapingConfigurationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapingConfiguration })
  async createScrapingConfiguration(
    @common.Body() data: ScrapingConfigurationCreateInput
  ): Promise<ScrapingConfiguration> {
    return await this.service.createScrapingConfiguration({
      data: data,
      select: {
        additionalParams: true,
        createdAt: true,
        id: true,
        platform: true,
        scrapeDepth: true,
        status: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapingConfiguration] })
  @ApiNestedQuery(ScrapingConfigurationFindManyArgs)
  async scrapingConfigurations(
    @common.Req() request: Request
  ): Promise<ScrapingConfiguration[]> {
    const args = plainToClass(ScrapingConfigurationFindManyArgs, request.query);
    return this.service.scrapingConfigurations({
      ...args,
      select: {
        additionalParams: true,
        createdAt: true,
        id: true,
        platform: true,
        scrapeDepth: true,
        status: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapingConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrapingConfiguration(
    @common.Param() params: ScrapingConfigurationWhereUniqueInput
  ): Promise<ScrapingConfiguration | null> {
    const result = await this.service.scrapingConfiguration({
      where: params,
      select: {
        additionalParams: true,
        createdAt: true,
        id: true,
        platform: true,
        scrapeDepth: true,
        status: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapingConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrapingConfiguration(
    @common.Param() params: ScrapingConfigurationWhereUniqueInput,
    @common.Body() data: ScrapingConfigurationUpdateInput
  ): Promise<ScrapingConfiguration | null> {
    try {
      return await this.service.updateScrapingConfiguration({
        where: params,
        data: data,
        select: {
          additionalParams: true,
          createdAt: true,
          id: true,
          platform: true,
          scrapeDepth: true,
          status: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapingConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrapingConfiguration(
    @common.Param() params: ScrapingConfigurationWhereUniqueInput
  ): Promise<ScrapingConfiguration | null> {
    try {
      return await this.service.deleteScrapingConfiguration({
        where: params,
        select: {
          additionalParams: true,
          createdAt: true,
          id: true,
          platform: true,
          scrapeDepth: true,
          status: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
